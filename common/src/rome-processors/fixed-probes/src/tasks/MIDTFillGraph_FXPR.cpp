////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// MIDTFillGraph_FXPR                                                         //
//                                                                            //
// Begin_Html <!--
/*-->

<!--*/
// --> End_Html
//                                                                            //
//                                                                            //
// Please note: The following information is only correct after executing     //
// the ROMEBuilder.                                                           //
//                                                                            //
// This task accesses the following folders :                                 //
//     ODB                                                                    //
//                                                                            //
// This task contains the following graphs :                                  //
//    MyGraph_FXPR                                                            //
//                                                                            //
// The histograms/graph are created and saved automaticaly by the task.       //
//                                                                            //
// The following method can be used to get a handle of the histogram/graph :  //
//                                                                            //
// Get<Histogram/Graph Name>()                                                //
//                                                                            //
// For histogram/graph arrays use :                                           //
//                                                                            //
// Get<Histogram/Graph Name>At(Int_t index)                                   //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/* Generated header file containing necessary includes                        */
#include "generated/MIDTFillGraph_FXPRGeneratedIncludes.h"

////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////

#include "generated/MIDAnalyzer.h"
#include "tasks/MIDTFillGraph_FXPR.h"
#include "ROMEiostream.h"
#include "TStyle.h"
#include "TROOT.h"
#include "TFile.h"
#include "TPad.h"
#include "TGraph.h"
#include "TGraph2D.h"
#include "TF2.h"
#include <TTree.h>
#include "ROMEODBOfflineDataBase.h"
#include "MIDODB.h"
#include <TBranch.h>
#include "TMath.h"
#include <vector>
#include "shim_structs.hh"
#include "shim_transforms.hh"
#include "fid.h"

const int fixed_probe_size = sizeof(gm2::fixed_t) / sizeof(uint);
static TFile *fTreeFile = NULL;
static TTree *fEventTree = NULL;
static gm2::fixed_t fixed;
static uint buffer[fixed_probe_size];
std::vector<double> wvfm;
std::vector<double> tvec;

ClassImp(MIDTFillGraph_FXPR)

//______________________________________________________________________________
void MIDTFillGraph_FXPR::Init()
{
}

//______________________________________________________________________________
void MIDTFillGraph_FXPR::BeginOfRun()
{
  TString treeFile = "data-out/fixed_tree_";
  treeFile += Form("%05i.root", gAnalyzer->GetODB()->GetRunNumber());

  fTreeFile = TFile::Open(treeFile.Data(), "RECREATE");
  fTreeFile->cd();
  fEventTree = new TTree("t_fxpr","Fixed Probe Data");
  fEventTree->Branch("fixed", &::fixed.sys_clock[0], gm2::fixed_str);

  tvec.resize(SAVE_FID_LN);
  wvfm.resize(SAVE_FID_LN);
  double dt = 0.001;
  double t0 = 0.0;

  // Set the tvec vector.
  for (int i = 0; i < SAVE_FID_LN; ++i) {
    tvec[i] = i * dt + t0;
  }

  fid::params::edge_width = 50;
  fid::params::edge_ignore = 20;
}

//______________________________________________________________________________
void MIDTFillGraph_FXPR::Event()
{
  if (IsMyGraph_FXPRActive()) {

    if (gAnalyzer->GetMidasDAQ()->GetFXPRBankEntries() > 0) {

      // Fill the int buffer.;
      int N = gAnalyzer->GetMidasDAQ()->GetFXPRBankEntries();
      for (int i = 0; i < N; i++) {
        buffer[i] = gAnalyzer->GetMidasDAQ()->GetFXPRBankAt(i);
      }

      // Then cast it to a fixed_t type.
      std::copy(&buffer[0],
                &buffer[fixed_probe_size],
                (int *)(&::fixed.sys_clock[0]));


      for (int ch = 0; ch < SHIM_FIXED_CH; ++ch) {

        // Re-analyze all the FIDs.

        for (int i = 0; i < SAVE_FID_LN; ++i) {
          wvfm[i] = ::fixed.trace[ch][i];
        }

        fid::Fid myfid(wvfm, tvec);
        myfid.CalcPhaseFreq(3);

        // Make sure we got an FID signal
        if (myfid.isgood()) {

          ::fixed.snr[ch] = myfid.snr();
          ::fixed.len[ch] = myfid.fid_time();
          ::fixed.freq[ch] = myfid.CalcPhaseFreq();
          ::fixed.ferr[ch] = myfid.freq_err();
          ::fixed.method[ch] = (ushort)fid::Method::PH;
          ::fixed.health[ch] = myfid.health();
          ::fixed.freq_zc[ch] = myfid.CalcZeroCountFreq();
          ::fixed.ferr_zc[ch] = myfid.freq_err();

        } else {

          ::fixed.snr[ch] = 0.0;
          ::fixed.len[ch] = 0.0;
          ::fixed.freq[ch] = 0.0;
          ::fixed.ferr[ch] = 0.0;
          ::fixed.method[ch] = (ushort)fid::Method::PH;
          ::fixed.health[ch] = myfid.health();
          ::fixed.freq_zc[ch] = 0.0;
          ::fixed.ferr_zc[ch] = 0.0;
        }
      }

      // Fill the TTree.
      fEventTree->Fill();
    }
  }
}

//______________________________________________________________________________
void MIDTFillGraph_FXPR::EndOfRun()
{
  fTreeFile->Write();
  fTreeFile->Close();
}

//______________________________________________________________________________
void MIDTFillGraph_FXPR::Terminate()
{
}


