////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// MIDTFillGraph_SHPF                                                         //
//                                                                            //
// Begin_Html <!--
/*-->

<!--*/
// --> End_Html
//                                                                            //
//                                                                            //
// Please note: The following information is only correct after executing     //
// the ROMEBuilder.                                                           //
//                                                                            //
//                                                                            //
// This task contains the following graphs :                                  //
//    MyGraph_SHPF                                                            //
//                                                                            //
// The histograms/graph are created and saved automaticaly by the task.       //
//                                                                            //
// The following method can be used to get a handle of the histogram/graph :  //
//                                                                            //
// Get<Histogram/Graph Name>()                                                //
//                                                                            //
// For histogram/graph arrays use :                                           //
//                                                                            //
// Get<Histogram/Graph Name>At(Int_t index)                                   //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/* Generated header file containing necessary includes                        */
#include "generated/MIDTFillGraph_SHPFGeneratedIncludes.h"

////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////

#include "generated/MIDAnalyzer.h"
#include "tasks/MIDTFillGraph_SHPF.h"
#include "ROMEiostream.h"
#include "TStyle.h"
#include "TROOT.h"
#include "TFile.h"
#include "TPad.h"
#include "TGraph.h"
#include "TGraph2D.h"
#include "TF2.h"
#include <TTree.h>
#include "ROMEODBOfflineDataBase.h"
#include "MIDODB.h"
#include <TBranch.h>
#include "TMath.h"

// uncomment if you want to include headers of all folders
//#include "MIDAllFolders.h"

int   tStamp_shpf = 0;
static TFile *fTreeFile = NULL;
static TTree *fEventTree = NULL;
static TBranch *fEventBranch = NULL;
int nPars = 10;
double px[25];
double py[25];

TF2* fitFcn;
TGraph2D *g2;

Double_t myRFunc(Double_t *v, Double_t *par);

ClassImp(MIDTFillGraph_SHPF)

//______________________________________________________________________________
void MIDTFillGraph_SHPF::Init()
{
}

//______________________________________________________________________________
void MIDTFillGraph_SHPF::BeginOfRun()
{

   int nProbes = 25;//in matrix
   float r1 = 2.25;
   float r2 = 4.5;
   for (int i=0; i<nProbes; i++){
     px[i] = 0.;
     py[i] = 0.;
   }

   px[0] = 0.;
   py[0] = 0.;

   px[1] = 0.;
   py[1] = -r1;

   px[2] = -r1*TMath::Cos(TMath::Pi()/4);
   py[2] = -r1*TMath::Sin(TMath::Pi()/4);

   px[3] = -r1;
   py[3] = 0.;

   px[4] = -r1*TMath::Cos(TMath::Pi()/4);
   py[4] = r1*TMath::Sin(TMath::Pi()/4);

   px[5] = 0.;
   py[5] = r1;

   px[6] = r1*TMath::Cos(TMath::Pi()/4);
   py[6] = r1*TMath::Sin(TMath::Pi()/4);

   px[7] = r1;
   py[7] = 0;

   px[8] = r1*TMath::Cos(TMath::Pi()/4);
   py[8] = -r1*TMath::Sin(TMath::Pi()/4);

   px[9] = -r2*TMath::Cos(12*TMath::Pi()/8);
   py[9] = r2*TMath::Sin(12*TMath::Pi()/8);

   px[10] = -r2*TMath::Cos(13*TMath::Pi()/8);
   py[10] = r2*TMath::Sin(13*TMath::Pi()/8);

   px[11] = -r2*TMath::Cos(14*TMath::Pi()/8);
   py[11] = r2*TMath::Sin(14*TMath::Pi()/8);

   px[12] = -r2*TMath::Cos(15*TMath::Pi()/8);
   py[12] = r2*TMath::Sin(15*TMath::Pi()/8);

   px[13] = -r2*TMath::Cos(0*TMath::Pi()/8);
   py[13] = r2*TMath::Sin(0*TMath::Pi()/8);

   px[14] = -r2*TMath::Cos(TMath::Pi()/8);
   py[14] = r2*TMath::Sin(TMath::Pi()/8);

   px[15] = -r2*TMath::Cos(2*TMath::Pi()/8);
   py[15] = r2*TMath::Sin(2*TMath::Pi()/8);

   px[16] = -r2*TMath::Cos(3*TMath::Pi()/8);
   py[16] = r2*TMath::Sin(3*TMath::Pi()/8);

   px[17] = -r2*TMath::Cos(4*TMath::Pi()/8);;
   py[17] = r2*TMath::Sin(4*TMath::Pi()/8);;

   px[18] = -r2*TMath::Cos(5*TMath::Pi()/8);
   py[18] = r2*TMath::Sin(5*TMath::Pi()/8);

   px[19] = -r2*TMath::Cos(6*TMath::Pi()/8);
   py[19] = r2*TMath::Sin(6*TMath::Pi()/8);

   px[20] = -r2*TMath::Cos(7*TMath::Pi()/8);
   py[20] = r2*TMath::Sin(7*TMath::Pi()/8);

   px[21] = -r2*TMath::Cos(8*TMath::Pi()/8);
   py[21] = r2*TMath::Sin(8*TMath::Pi()/8);

   px[22] = -r2*TMath::Cos(9*TMath::Pi()/8);
   py[22] = r2*TMath::Sin(9*TMath::Pi()/8);

   px[23] = -r2*TMath::Cos(10*TMath::Pi()/8);
   py[23] = r2*TMath::Sin(10*TMath::Pi()/8);

   px[24] = -r2*TMath::Cos(11*TMath::Pi()/8);
   py[24] = r2*TMath::Sin(11*TMath::Pi()/8);

   g2 = new TGraph2D();
   fitFcn = new TF2("fitFcn",myRFunc,4.5,4.5,-4.5,4.5,nPars);
   fitFcn->SetParNames("NPars","Dipole","Normal quad","Skew quad","Normal sext","Skew sext","Normal oct","Skew oct","Normal deca","Skew deca");
   fitFcn->FixParameter(0,nPars);

}

//______________________________________________________________________________
void MIDTFillGraph_SHPF::Event()
{

  gStyle->SetStatH(0.2);
  gStyle->SetStatW(0.6);
  gStyle->SetCanvasColor(0);
  gStyle->SetTitleFillColor(0);
  gStyle->SetTitleBorderSize(0);
  gStyle->SetStatColor(0);
  gStyle->SetHistLineWidth(0);
  g2->Clear();
  /*
  fitFcn->Clear();
  fitFcn = new TF2("fitFcn",myRFunc,4.5,4.5,-4.5,4.5,nPars);
  fitFcn->SetParNames("NPars","Dipole","Normal quad","Skew quad","Normal sext","Skew sext","Normal oct","Skew oct","Normal deca","Skew deca");
  fitFcn->FixParameter(0,nPars);
  */

  cout<<" event, gAnalyzer->GetMidasDAQ()->GetSHPFBankEntries() "<<gAnalyzer->GetMidasDAQ()->GetSHPFBankEntries()<<endl;

   if (IsMyGraph_SHPFActive()) {
	  
       tStamp_shpf = gAnalyzer->GetActiveDAQ()->GetTimeStamp();
       //cout<<" NChannels_SHPF "<<gAnalyzer->GetGSP()->GetNChannels_SHPF()<<endl;

       for (Int_t i = 140; i < 165; i++) {//extend to 168 if want to include FP position 
           if (gAnalyzer->GetMidasDAQ()->GetSHPFBankAt(i)>0&&gAnalyzer->GetMidasDAQ()->GetSHPFBankAt(i)<1e9){

           //if (i==140) cout<<"\n\n tstamp "<<tStamp_shpf<<endl;
           //cout<<" probe "<<i+1-140<<" frequency "<<gAnalyzer->GetMidasDAQ()->GetSHPFBankAt(i)<<endl;
           GetMyGraph_SHPFAt(i-140)->SetPoint(GetMyGraph_SHPFAt(i-140)->GetN(),gAnalyzer->GetActiveDAQ()->GetTimeStamp(),(double)gAnalyzer->GetMidasDAQ()->GetSHPFBankAt(i)/61.74e3*1e6);
           GetMyGraph_SHPFAt(i-140)->SetTitle(Form("Probe %d freq (ppm) vs p_{1} (deg)",i+1-140));
           g2->SetPoint(i-140,px[i-140],py[i-140],(double)gAnalyzer->GetMidasDAQ()->GetSHPFBankAt(i)/61.74e3*1e6);
           if (i==164){
             g2->Fit("fitFcn","Q");
             GetMyGraph_SHPFAt(25)->SetPoint(GetMyGraph_SHPFAt(25)->GetN(),gAnalyzer->GetActiveDAQ()->GetTimeStamp(),fitFcn->GetParameter(1));//dipole
             GetMyGraph_SHPFAt(26)->SetPoint(GetMyGraph_SHPFAt(26)->GetN(),gAnalyzer->GetActiveDAQ()->GetTimeStamp(),fitFcn->GetParameter(2));//norm quad
             GetMyGraph_SHPFAt(27)->SetPoint(GetMyGraph_SHPFAt(27)->GetN(),gAnalyzer->GetActiveDAQ()->GetTimeStamp(),fitFcn->GetParameter(3));//skew quad
             GetMyGraph_SHPFAt(28)->SetPoint(GetMyGraph_SHPFAt(28)->GetN(),gAnalyzer->GetActiveDAQ()->GetTimeStamp(),fitFcn->GetParameter(4));//norm sext
             GetMyGraph_SHPFAt(29)->SetPoint(GetMyGraph_SHPFAt(29)->GetN(),gAnalyzer->GetActiveDAQ()->GetTimeStamp(),fitFcn->GetParameter(5));//skew sext
             GetMyGraph_SHPFAt(30)->SetPoint(GetMyGraph_SHPFAt(30)->GetN(),gAnalyzer->GetActiveDAQ()->GetTimeStamp(),fitFcn->GetParameter(6));//norm octu
             GetMyGraph_SHPFAt(31)->SetPoint(GetMyGraph_SHPFAt(31)->GetN(),gAnalyzer->GetActiveDAQ()->GetTimeStamp(),fitFcn->GetParameter(7));//skew octu
             GetMyGraph_SHPFAt(32)->SetPoint(GetMyGraph_SHPFAt(32)->GetN(),gAnalyzer->GetActiveDAQ()->GetTimeStamp(),fitFcn->GetParameter(8));//norm decu
             GetMyGraph_SHPFAt(33)->SetPoint(GetMyGraph_SHPFAt(33)->GetN(),gAnalyzer->GetActiveDAQ()->GetTimeStamp(),fitFcn->GetParameter(9));//skew decu
             GetMyGraph_SHPFAt(34)->SetPoint(GetMyGraph_SHPFAt(34)->GetN(),gAnalyzer->GetActiveDAQ()->GetTimeStamp(),fitFcn->GetChisquare()/16.);//chisq

             GetMyGraph_SHPFAt(25)->SetTitle("dipole");
             GetMyGraph_SHPFAt(26)->SetTitle("norm quad");
             GetMyGraph_SHPFAt(27)->SetTitle("skew quad");
             GetMyGraph_SHPFAt(28)->SetTitle("norm sext");
             GetMyGraph_SHPFAt(29)->SetTitle("skew sext");
             GetMyGraph_SHPFAt(30)->SetTitle("norm octu");
             GetMyGraph_SHPFAt(31)->SetTitle("skew octu");
             GetMyGraph_SHPFAt(32)->SetTitle("norm decu");
             GetMyGraph_SHPFAt(33)->SetTitle("skew decu");
             GetMyGraph_SHPFAt(34)->SetTitle("#chi^{2}/DOF");

             //cout<<" dipole "<<fitFcn->GetParameter(1)<<" norm quad "<<fitFcn->GetParameter(2)<<" chisq "<<fitFcn->GetChisquare()/16.<<endl;
           }
         }
      } 
   }

}

//______________________________________________________________________________
void MIDTFillGraph_SHPF::EndOfRun()
{
}

//______________________________________________________________________________
void MIDTFillGraph_SHPF::Terminate()
{
}

Double_t myRFunc(Double_t *v, Double_t *par){

  double x = v[0];
  double y = v[1];

  double r = sqrt(x*x+y*y);
  double rf = r/4.5;//4.5 cm aperture 
  double theta = TMath::ATan2(y,x);

  int   nP = par[0];
  double B = par[1];

  for (int i=2; i<nP; i+=2){
    B += TMath::Power(rf,1*(i/2)) * (par[i] * cos((i/2)*theta) + par[i+1] * sin ((i/2)*theta));
  }

  return B;

}

